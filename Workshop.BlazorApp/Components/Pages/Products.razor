@page "/products"
@page "/products/command/{Command:alpha}"
@using Workshop.Library.Bootstrap

@attribute [Authorize]

@inherits PageBase<ProductsState, ProductSelectors>

@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageHeader>
  <Count># @ProductList.Count</Count>
  <Title><i>@Title</i></Title>
</PageHeader>
<Condition Check="State.Value.IsLoading">
  <If>
    Lade Icon...
  </If>
</Condition>
<button class="btn btn-success" @onclick="AddProduct">Add Product</button>

<DataGrid Items="ProductList.Products" Condensed Bordered Striped Hover></DataGrid>

<ul>
  <Repeater TItem="ProductViewModel" Items="ProductList.Products">
    <ItemTemplate>
      <li @key="@context.Id">
        <ProductItem Item="@context"></ProductItem> 
        <button class="btn btn-primary btn-sm" @onclick="@(() => ProductAction(context.Id, "Edit"))">Edit</button>
        <button class="btn btn-danger btn-sm" @onclick="@(() => ProductAction(context.Id, "Delete"))">Delete</button>
        <button class="btn btn-secondary btn-sm" @onclick="@(() => Copy(context))">Copy to Clipbard</button>
      </li>
    </ItemTemplate>
  </Repeater>
</ul>
<Condition Check="currentComponentType != null">
  <If>
    <DynamicComponent Type="currentComponentType" Parameters="dynamicParameters"></DynamicComponent>
  </If>
</Condition>
<SuccessMessage Duration="3000" Visible="deleteResult">
  Product deleted
</SuccessMessage>
<span class="badge rounded-pill bg-success invisible" @ref="badgeSpan">Success</span>

@code {

  private string Title => "Products"; // resx
  private ProductListViewModel ProductList => State.Value.Products;
  private bool deleteResult;
  private Type? currentComponentType;
  private Dictionary<string, object> dynamicParameters = new Dictionary<string, object>();
  private ElementReference badgeSpan;

  [Parameter]
  public string? Command { get; set; }

  protected override void OnInitialized()
  {
    Dispatcher.Dispatch(LoadProducts());
    base.OnInitialized();
  }

  protected override void OnParametersSet()
  {    
    var query = new Uri(Navigation.Uri).Query;
    var @params = QueryHelpers.ParseQuery(query);
    if (@params.TryGetValue("fromDelete", out var fromDelete)) {
      var val = fromDelete.ToString();
    }
  }

  private void ProductAction(int id, string action)
  {
    switch (action)
    {
      case "Edit":
        currentComponentType = typeof(EditProductInline);
        dynamicParameters = new Dictionary<string, object> { { "Id", id } };
        break;
      case "Delete":
        currentComponentType = typeof(DeleteProduct);
        dynamicParameters = new Dictionary<string, object> { { "Id", id } };
        break;
    }
  }

  private void AddProduct()
  {
    var newProduct = new ProductViewModel { Name = "New Product", Price = 150 };
    // TODO: Action!
    // ProductsRepo.AddProduct(newProduct);
  }

  // private void DeleteProduct(int id)
  // {
  //   deleteId = id;
  // }

  // private void ProductListChanged()
  // {
  //   deleteId = 0;
  //   StateHasChanged();
  // }

  private void DeleteResult(bool result)
  {
    deleteResult = result;
    // if (result)
    // {
    //   ProductListChanged();
    // }
  }

  private async Task Copy(ProductViewModel product)
  {
    await JSRuntime.InvokeVoidAsync("copyTextToClipboard", $"{product.Name} #{product.Id}", badgeSpan);    
  }

}
