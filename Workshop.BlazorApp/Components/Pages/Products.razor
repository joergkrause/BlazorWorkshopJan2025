@page "/products"
@page "/products/command/{Command:alpha}"

@using Microsoft.AspNetCore.WebUtilities
@using Workshop.BlazorApp.Components.Pages.ProductsParts
@using Workshop.BlazorApp.Components._Shared
@using Workshop.Datasource
@using Workshop.Library
@using Workshop.ViewModels

@inject IProductsRepository ProductsRepo
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageHeader>
  <Count># @ProductList.Count</Count>
  <Title><i>@Title</i></Title>
</PageHeader>
<button class="btn btn-success" @onclick="AddProduct">Add Product</button>
<ul>
  <Repeater TItem="ProductViewModel" Items="ProductList.Products">
    <ItemTemplate>
      <li @key="@context.Id">
        <ProductItem Item="@context"></ProductItem> <NavLink href="@context.EditLink">Edit</NavLink>
        <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteProduct(context.Id))">Delete</button>
        <button class="btn btn-secondary btn-sm" @onclick="@(() => Copy(context))">Copy to Clipbard</button>
      </li>
    </ItemTemplate>
  </Repeater>
</ul>
<Condition Check="deleteId != 0">
  <If>
    <DeleteProduct Id="deleteId" Changed="ProductListChanged" Result="DeleteResult"></DeleteProduct>
  </If>
</Condition>
<SuccessMessage Duration="3000" Visible="deleteResult">
  Product deleted
</SuccessMessage>
<span class="badge rounded-pill bg-success invisible" @ref="badgeSpan">Success</span>

@code {

  private string Title => "Products"; // resx
  private ProductListViewModel ProductList => ProductsRepo.GetProducts();
  private int deleteId;
  private bool deleteResult;
  private ElementReference badgeSpan;

  [Parameter]
  public string? Command { get; set; }

  protected override void OnParametersSet()
  {    
    var query = new Uri(Navigation.Uri).Query;
    var @params = QueryHelpers.ParseQuery(query);
    if (@params.TryGetValue("fromDelete", out var fromDelete)) {
      var val = fromDelete.ToString();
    }
  }

  private void AddProduct()
  {
    var newProduct = new ProductViewModel { Name = "New Product", Price = 150 };
    ProductsRepo.AddProduct(newProduct);
  }

  private void DeleteProduct(int id)
  {
    deleteId = id;
  }

  private void ProductListChanged()
  {
    deleteId = 0;
    StateHasChanged();
  }

  private void DeleteResult(bool result)
  {
    deleteResult = result;
    // if (result)
    // {
    //   ProductListChanged();
    // }
  }

  private async Task Copy(ProductViewModel product)
  {
    await JSRuntime.InvokeVoidAsync("copyTextToClipboard", $"{product.Name} #{product.Id}", badgeSpan);
  }

}
