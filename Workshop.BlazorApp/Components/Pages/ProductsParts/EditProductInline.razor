@inherits PageBase<ProductsState, ProductSelectors>

<Condition Check="Product != null">
  <If>
    <EditForm EditContext="editContext" OnValidSubmit="Save">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <TextEdit For="@(() => Product.Name)" Item="Product" @bind-Value="Product.Name"></TextEdit>
      <NumEdit For="@(() => Product.Price)" Item="Product" @bind-Value="Product.Price" @ref="numericEdit"></NumEdit>

      <div class="m-2">
        <button type="submit" class="btn btn-outline-success">Save</button>
      </div>
    </EditForm>
  </If>
  <Else>No Product!</Else>
</Condition>

@code {

  private EditContext? editContext;
  private bool mustSave;
  private NumEdit<ProductEditViewModel>? numericEdit;

  [Parameter]
  public int Id { get; set; }

  private ProductEditViewModel? Product { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    var product = State.Value.Products.Products.Single(e => e.Id == Id);
    Product = new ProductEditViewModel
      {
        Name = product.Name,
        Price = product.Price
      };
    editContext = new EditContext(Product);    
  }

  private void Save(EditContext editContext)
  {
    if (editContext.Validate())
    {
      var model = editContext.Model as ProductEditViewModel;
      Dispatcher.Dispatch(SaveProduct(model!));
      mustSave = false;
    }
  }

}
