@page "/"
@using System.Security.Claims
@using Workshop.Library.Bootstrap
@using Workshop.Library.Bootstrap.Models

@attribute [AllowAnonymous]

@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
  label {
    color: red !important;
  }
</style>

<PageTitle>Home</PageTitle>


<Container>
  <Row>
    <Column>
      <h1>Hello, world!</h1>
    </Column>
  </Row>
  <Row>
    <Column>

      <EditForm Model="model">
        <FormGroup>
          <label style="color: green !important;">Input:</label>
          <input @bind="@model.MiniModel" @bind:event="oninput" class="form-control"></input>
        </FormGroup>
      </EditForm>

    </Column>
  </Row>
</Container>
<pre>
  Text              <del>entfällt</del>            oder             
  
  
  
  
  
  <ins>Eingefügt.</ins>
</pre>
<output> @model.MiniModel</output>

<Condition Check="_claims.Count() > 0">
  <If>
    <ul>
      <Repeater Items="_claims">
        <ItemTemplate>
          <li>@context.Type &ndash; @context.Value</li>
        </ItemTemplate>
      </Repeater>
    </ul>
  </If>
</Condition>


@code {

  private Model model = new();
  private string? _authMessage;
  private string? _surnameMessage;
  private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

  class Model
  {
    public string MiniModel { get; set; }
  }

  protected override async Task OnInitializedAsync()
  {
    var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user != null && user.Identity!.IsAuthenticated)
    {
      _authMessage = $"{user.Identity.Name} is authenticated.";
      _claims = user.Claims;
      _surnameMessage =
          $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
    }
    else
    {
      _authMessage = "The user is NOT authenticated.";
    }
  }

}